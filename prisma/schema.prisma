// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Collaboration Post model - Core entity for collaboration posts
model CollaborationPost {
  id            String   @id @default(cuid())
  coinAddress   String   @unique
  creatorWallet String
  title         String
  description   String   @db.Text
  media         Json     // Media object with ipfsUrl, gatewayUrl, fileName, fileType, fileSize
  metadata      Json?    // Optional metadata with tags, category, estimatedDuration, budget
  coinName      String
  coinSymbol    String
  role          String
  paymentType   PaymentType
  credits       Boolean
  workStyle     WorkStyle
  location      String
  status        CollabStatus @default(open)
  collaborators Json     // CollaboratorRole[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  expiresAt     DateTime?
  
  // Relations
  pings         Ping[]
  matches       Match[]

  @@index([creatorWallet])
  @@index([coinAddress])
  @@index([status])
  @@index([createdAt])
  @@index([location])
  @@index([paymentType])
  @@map("collaboration_posts")
}

// Ping model - User interactions with collaboration posts
model Ping {
  id              String     @id @default(cuid())
  collabPostId    String
  pingedWallet    String
  interestedRole  String
  bio             String
  status          PingStatus @default(pending)
  createdAt       DateTime   @default(now())
  respondedAt     DateTime?
  
  // Relations
  collabPost      CollaborationPost @relation(fields: [collabPostId], references: [id], onDelete: Cascade)
  match           Match?

  @@unique([collabPostId, pingedWallet])
  @@index([pingedWallet])
  @@index([status])
  @@index([createdAt])
  @@map("pings")
}

// Match model - Accepted collaborations
model Match {
  id                String      @id @default(cuid())
  collabPostId      String
  creatorWallet     String
  collaboratorWallet String
  projectName       String
  role              String
  status            MatchStatus  @default(active)
  createdAt         DateTime    @default(now())
  lastMessageAt     DateTime    @default(now())
  unreadCount       Int         @default(0)
  
  // Relations
  collabPost        CollaborationPost @relation(fields: [collabPostId], references: [id], onDelete: Cascade)
  ping              Ping?            @relation(fields: [id], references: [id])
  messages          Message[]

  @@unique([collabPostId, collaboratorWallet])
  @@index([creatorWallet])
  @@index([collaboratorWallet])
  @@index([status])
  @@index([lastMessageAt])
  @@map("matches")
}

// Message model - Conversation messages
model Message {
  id              String      @id @default(cuid())
  matchId         String
  senderWallet    String
  content         String
  messageType     MessageType @default(text)
  attachments     Json?       // MessageAttachment[]
  createdAt       DateTime    @default(now())
  readAt          DateTime?
  
  // Relations
  match           Match       @relation(fields: [matchId], references: [id], onDelete: Cascade)

  @@index([matchId])
  @@index([senderWallet])
  @@index([createdAt])
  @@map("messages")
}

// Enums
enum PaymentType {
  paid
  barter
  both
}

enum WorkStyle {
  contract
  freestyle
}

enum CreatorType {
  indie
  org
  brand
}

enum CompensationType {
  paid
  barter
  both
}

enum TimeCommitment {
  ongoing
  one_time
}

enum CollabStatus {
  open
  shortlisted
  signed
  closed
}

enum PingStatus {
  pending
  accepted
  declined
}

enum MatchStatus {
  active
  completed
  cancelled
}

enum MessageType {
  text
  image
  file
  milestone
}

// User model - User profiles and onboarding data
model User {
  id                  String    @id @default(cuid())
  zoraWalletAddress   String    @unique
  walletAddress       String?
  userType            UserType
  creativeDomains     Json      // string[]
  status              UserStatus
  name                String
  tagline             String
  orgName             String?
  orgType             String?
  skills              Json      // string[]
  onboardedAt         DateTime  @default(now())
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  @@index([zoraWalletAddress])
  @@map("users")
}

enum UserType {
  indie
  commercial
}

enum UserStatus {
  available
  gigs
  collabs
  exploring
}